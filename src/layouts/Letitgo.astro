---
import "@/styles/index.scss";

import { ViewTransitions } from "astro:transitions";
import MailJS from "@/components/MailJS.astro";
import ExternalFonts from "@/components/ExternalFonts.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";

interface Props {
  title?: string;
  description?: string;
  page?: string;
}

const {
  title = "letitgo - украшения ручной работы",
  description = "Украшения ручной работы. Натуральный жемчуг!",
  page,
} = Astro.props;
---

<!doctype html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content="украшения, жемчуг, ожерелье, handmade" />
    <ViewTransitions />
    <ExternalFonts />
    <MailJS></MailJS>
  </head>

  <body class="letitgo" data-page={page} x-data="letitgo()">
    <Header />
    <main>
      <div class="container">
        <slot />
      </div>
    </main>
    <Footer />
  </body>
</html>

<script is:inline>
  document.addEventListener("alpine:init", () => {
    Alpine.store("cart"), Alpine.store("count");
  });

  function letitgo() {
    items = JSON.parse(sessionStorage.shoppingCart || "[]");
    count = JSON.parse(sessionStorage.shoppingCartCount || 0);
    Alpine.store("cart", items);
    Alpine.store("count", count);
    const orderDialog = document.getElementById("orderDialog");

    return {
      product() {
        return {
          inCart: false,
          buyBtnTitle: "В корзину",

          init() {
            Alpine.store("cart", items);
            const product = {};
            product.code = this.$el.dataset.code;

            if (Alpine.store("cart").some((e) => e.code === product.code)) {
              this.inCart = true;
            }
          },
        };
      },

      updateStorage() {
        sessionStorage.setItem("shoppingCart", JSON.stringify(items));
        sessionStorage.setItem("shoppingCartCount", count);
        Alpine.store("cart", items);
        Alpine.store("count", count);
      },

      clearStorage() {
        sessionStorage.setItem("shoppingCart", []);
        sessionStorage.setItem("shoppingCartCount", 0);
        Alpine.store("cart", []);
        Alpine.store("shoppingCartCount", 0);
      },

      toCart() {
        const product = {};
        product.url = this.$el.dataset.url;
        product.code = this.$el.dataset.code;
        product.name = this.$el.dataset.name;
        product.price = this.$el.dataset.price;
        product.image = this.$el.dataset.image;

        if (!Alpine.store("cart").some((e) => e.code === product.code)) {
          this.inCart = true;
          items.push(product);
          count = ++count;
          this.updateStorage();
        }
      },

      removeFromCart(product) {
        items = Alpine.store("cart").filter((e) => e.code !== product.code);
        count = Alpine.store("count") - 1;
        this.updateStorage();
        this.products = items;
      },

      clearCart() {
        this.products = [];
        this.clearStorage();
      },

      getCartCount() {
        return Alpine.store("count") > 0 ? Alpine.store("count") : "";
      },

      getTotalPrice() {
        return this.products.reduce((total, cur) => total + Number(cur.price), 0);
      },

      openOrderDialog() {
        orderDialog.showModal();
      },

      getOrderList() {
        return {
          init() {
            orderList = items;
            orderListTotalPrice = this.getTotalPrice;
          }
        }
      },

      submitOrder() {
        console.log("submit clicked");
        this.orderSubmiting = true;

        emailjs.sendForm("service_72h0drh", "template_61e5xwp", this.$el).then(
          () => {
            console.log("SUCCESS!");
            this.closeOrderDialog();
            this.clearCart();
          },
          (error) => {
            console.log("FAILED...", error);
          },
        );
      },

      closeOrderDialog() {
        orderDialog.close();
        this.clearInputs();
      },

      clearInputs() {
        document.querySelectorAll('input').forEach(input => input.value = '')
        document.querySelectorAll('textarea').forEach(textarea => textarea.value = '')
      },
    };
  }
</script>
